global:
  image:
    repository: quay.io/argoproj/argocd
    tag: ""
    imagePullPolicy: IfNotPresent

  securityContext:
   runAsUser: 999
   runAsGroup: 999
   fsGroup: 999

  # TODO: enable network policy
  networkPolicy:
    create: false
    defaultDenyIngress: false

controller:
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
    runAsNonRoot: true

  # resources:
  #  limits:
  #    cpu: 500m
  #    memory: 512Mi
  #  requests:
  #    cpu: 250m
  #    memory: 256Mi

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator
    rules:
      enabled: true
      spec:
      - alert: ArgoAppMissing
        expr: |
          absent(argocd_app_info)
        for: 15m
        labels:
          severity: critical
        annotations:
          summary: "[Argo CD] No reported applications"
          description: >
            Argo CD has not reported any applications data for the past 15 minutes which
            means that it must be down or not functioning properly.  This needs to be
            resolved for this cloud to continue to maintain state.
      - alert: ArgoAppNotSynced
        expr: |
          argocd_app_info{sync_status!="Synced"} == 1
        for: 12h
        labels:
          severity: warning
        annotations:
          summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
          description: >
            The application [{{`{{$labels.name}}`}} has not been synchronized for over
            12 hours which means that the state of this cloud has drifted away from the
            state inside Git.
    #   selector:
    #     prometheus: kube-prometheus
    #   namespace: monitoring
      additionalLabels:
        release: prometheus-operator

dex:
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  # resources: 
  #  limits:
  #    cpu: 50m
  #    memory: 64Mi
  #  requests:
  #    cpu: 10m
  #    memory: 32Mi

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

redis:
  enabled: true
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true
  
  # resources:
  #  limits:
  #    cpu: 200m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 64Mi

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator


redis-ha:
  enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

server:
  # -- The number of server pods to run
  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  config:
    # Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: mk.argocd.local

    # To enable helm install through kustomize in argocd
    kustomize.buildOptions: --enable-helm

    # Ignore difference for alb contoller webhook clientConfig
    # can apply this to other required apps using "syncPolicy.syncOptions: - RespectIgnoreDifferences=true" in argocd app
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
      jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'
    resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
      jqPathExpressions:
        - '.webhooks[]?.clientConfig.caBundle'


  # rbacConfig:
  # {}
  # policy.csv is a file containing user-defined RBAC policies and role definitions (optional).
  # Policy rules are in the form:
  #   p, subject, resource, action, object, effect
  # Role definitions and bindings are in the form:
  #   g, subject, inherited-subject
  # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
  # policy.csv: |
  #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'
  #   p, my-org:team-alpha, applications, sync, my-project/*, allow
  #   # Grant all members of 'my-org:team-beta' admins
  #   g, my-org:team-beta, role:admin
  # policy.default is the name of the default role which Argo CD will falls back to, when
  # authorizing API requests (optional). If omitted or empty, users may be still be able to login,
  # but will see no apps, projects, etc...
  # policy.default: role:readonly
  # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
  # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.
  # scopes: '[cognito:groups, email]'
          
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    ingressClassName: nginx
    hosts:
      - mk.argocd.local
    tls:
      - hosts:
          - mk.argocd.local
  
  containerSecurityContext:
    capabilities:
      drop:
        - all
    readOnlyRootFilesystem: true

  resources:
   limits:
     cpu: 100m
     memory: 128Mi
   requests:
     cpu: 50m
     memory: 64Mi

  # certificate:
  #   # -- Deploy a Certificate resource (requires cert-manager)
  #   enabled: false
  #   # -- Certificate primary domain (commonName)
  #   domain: argocd.example.com
  #   # -- The requested 'duration' (i.e. lifetime) of the Certificate. Value must be in units accepted by Go time.ParseDuration
  #   duration: ""
  #   # -- How long before the currently issued certificate's expiry cert-manager should renew the certificate. Value must be in units accepted by Go time.ParseDuration
  #   renewBefore: ""
  #   issuer:
  #     # -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
  #     kind: ""
  #     # -- Certificate isser name. Eg. `letsencrypt`
  #     name: ""
  #   # -- Certificate manager additional hosts
  #   additionalHosts: []
  #   # -- The name of the Secret that will be automatically created and managed by this Certificate resource
  #   secretName: argocd-server-tls

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

repoServer:
  # -- The number of server pods to run
  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

applicationSet:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

notifications:
  argocdUrl: mk.argocd.local

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

configs:

  clusterCredentials: []