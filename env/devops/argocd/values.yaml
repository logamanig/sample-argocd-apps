global:
  image:
    repository: quay.io/argoproj/argocd
    tag: ""
    imagePullPolicy: IfNotPresent
  securityContext:
   runAsUser: 999
   runAsGroup: 999
   fsGroup: 999

  # TODO: enable network policy
  networkPolicy:
    create: false
    defaultDenyIngress: false

controller:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator
    rules:
      enabled: true
      spec:
      - alert: ArgoAppMissing
        expr: |
          absent(argocd_app_info)
        for: 15m
        labels:
          severity: critical
        annotations:
          summary: "[Argo CD] No reported applications"
          description: >
            Argo CD has not reported any applications data for the past 15 minutes which
            means that it must be down or not functioning properly.  This needs to be
            resolved for this cloud to continue to maintain state.
      - alert: ArgoAppNotSynced
        expr: |
          argocd_app_info{sync_status!="Synced"} == 1
        for: 12h
        labels:
          severity: warning
        annotations:
          summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
          description: >
            The application [{{`{{$labels.name}}`}} has not been synchronized for over
            12 hours which means that the state of this cloud has drifted away from the
            state inside Git.
    #   selector:
    #     prometheus: kube-prometheus
    #   namespace: monitoring
      additionalLabels:
        release: prometheus-operator

dex:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

redis:
  enabled: true
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator


redis-ha:
  enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

server:
  # -- The number of server pods to run
  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  config:
    url: mk.argocd.local

    # To enable helm install through kustomize in argocd
    kustomize.buildOptions: --enable-helm
          
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    ingressClassName: nginx
    hosts:
      - mk.argocd.local
    tls:
      - hosts:
          - mk.argocd.local
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

repoServer:
  # -- The number of server pods to run
  replicas: 1

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

applicationSet:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

notifications:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      # relabelings: []
      metricRelabelings: []
      # -- Prometheus ServiceMonitor selector
      selector: {}
        # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      additionalLabels:
        release: prometheus-operator

config:
  clusterCredentials: []